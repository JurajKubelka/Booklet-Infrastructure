!! Commander: A command pattern library

In this chapter you will learn about a new library to manage commands. The library is based on three main objects: ''commands'' that represent the actions to be executed, ''command activation strategies'' that represent ways commands are activated (i.e., using shortcuts, menus..) and ''contexts'' which represent the state of application, users of commands.

!!! Commands

Commander models application actions as first class objects.

Every action is implemented as separate command class (subclass of ==CmdCommand==) with ==execute== method and all state required for execution.

!!! An example

Let's look how we can apply commands to control simple contact book.
The code of example is packaged inside Commander-Examples package. So you can load it and play.

In the domain we need two classes:

1. Contact with name and phone:

[[[
Object subclass: #Contact
	instanceVariableNames: 'name phone'
	classVariableNames: ''
	package: 'Commander-Examples'

Contact>>printOn: aStream
	super printOn: aStream.

	aStream nextPut: $(.
	aStream nextPutAll: name.
	aStream nextPut: $).
]]]

2. Contact book with collection of contacts:

[[[
Object subclass: #ContactBook
	instanceVariableNames: 'contents'
	classVariableNames: ''
	package: 'Commander-Examples'

ContactBook>>addContact: aContact
	contents add: aContact

ContactBook>>add: contactName phone: phone
	| contact |
	contact := CmdContact named: contactName phone: phone.
	self addContact: contact.
	^contact

ContactBook>>includesContact: aContact
	^ contents includes: aContact
]]]

Now we can create ==RenameContactCommand== command to rename given contact:

[[[
CmdCommand subclass: #RenameContactCommand
	instanceVariableNames: 'contact newName'
	classVariableNames: ''
	package: 'Commander-Examples'

RenameContactCommand>>execute
	contact name: newName
]]]

Also we need accessors and constructors for these classes. For example for the command it would be:

[[[
RenameContactCommand class>>contact: aContact to: newNameString
   ^self new
	 		contact: aContact;
			newName: newNameString
]]]

Now in playground we are able rename contact using this command:

[[[
contact := Contact new.
command := RenameContactCommand contact: contact to: 'John Smith'.
command execute.
]]]

Before we continue we should write simple UI which will show contact book contents.
To follow you should be fimilar with Spec UI framework.
We need just one presenter which will show contact table:

[[[
ComposablePresenter subclass: #ContactBookPresenter
	instanceVariableNames: 'table contactBook'
	classVariableNames: ''
	package: 'Commander-Examples'

ContactBookPresenter>>initializeWidgets
	table := self newList.
	table numberOfColumns: 2 withWidths: #(250 250).
	table displayBlock: [ :contact | {contact name. contact phone} ].
	table items: contactBook contents
]]]

And let's make reusable book as class side variable:

[[[
ContactBook>>family
	^family ifNil: [
		family := self new
			add: 'John' phone: '342 345';
			add: 'Bill' phone: '123 678';
			add: 'Marry' phone: '789 567';
			yourself]
]]]

Now we are able show family phone book with Spec UI:

[[[
ContactBookPresenter class>>familyExample
	<example>
	^ (self on: ContactBook family) openWithSpec
]]]

We put it as example. So you can run it from the browser using suitable icon:

+Family book window.>file://figures/Family.png+

!!! Activation strategy

Commands are reusable objects and applications provide various ways to access them: shortcuts, context menu, buttons, etc..
This information is attached to command classes as activation strategies. Currently there are three types of activations:
- ==CmdShortcutCommandActivation==
- ==CmdContextMenuCommandActivation==
- ==CmdDragAndDropCommandActivation==

Strategies annotate command as contextual class annotations. Look at project ClassAnnotation for details.
Strategies are always attached to commands with concrete application context where they can be used.
In simplest case it can be just a class of user application or widget like ==ContactBookPresenter== in example.

For example following method will allow RenameContactCommand to be executed by shortcut in the context of our presenter:

[[[
RenameClassCommand class>>shortcutActivation
    <classAnnotation>
    ^CmdShortcutCommandActivation by: $r meta for: ContactBookPresenter
]]]

Similarly the following method ==menuActivation== defines that the ==RenameContactCommand== can be executed from a context menu. Note the use of ==CmdContextMenuCommandActivation== in the method, while the previous one was using ==CmdShortcutCommandActivation==.

[[[
RenameContactCommand class>>menuActivation
    <classAnnotation>
    ^CmdContextMenuCommandActivation byRootGroupItemFor: ContactBookPresenter
]]]

If you will open window neither shortcuts or context menu will work. The problem is that Spec has no information about Commander. It only provides basic functionality to define menu and shortcuts on low level. But Commander provides integration with Spec which allow enable Commander inside Spec presenters.

Try modify ==initializeWidgets== method to activate context menu:
[[[
ContactBookPresenter>>initializeWidgets
	table := self newList.
	table numberOfColumns: 2 withWidths: #(250 250).
	table displayBlock: [ :contact | {contact name. contact phone} ].
	table items: contactBook contents

	table enableCommanderMenuBy: self
]]]

===enableCommanderMenuBy:=== adds context menu to table presenter which will be filled by commands defined in context of presenter in the argument (ContactBookPresenter).

In this case the right click on table will show the menu with single item named "RenameContactCommand".
To specify better name for menu you need to define the method ==defaultMenuItemName==:

[[[
RenameContactCommand>>defaultMenuItemName
	^'Rename'
]]]

Now if you will click on 'Rename' menu item you will got exception. From the debugger you can investigate that command instance is not initialized: ==contact== and ==newName== are nil.
Commander provides method where commands should retrieve their state from given context instance:

[[[
RenameContactCommand>>prepareExecutionInContext: aToolContext
	super prepareExecutionInContext: aToolContext.

	contact := aToolContext selectedContact.

	newName := UIManager default
		request: 'New name of the contact'
		initialAnswer: contact name
		title: 'Rename a contact'.
	newName isEmptyOrNil | (newName = contact name) ifTrue: [ ^ CmdCommandAborted signal ]
]]]

By default due to Spec integration Commander will pass presenter instance to aToolContext argument. But in general it is not enough and you will see example later.
Now you only need to know that context represents application state and here we define what information is required to be able reuse commands in various applications.

In our example we expect to receive ==selectedContact== from the context. But we are requesting ==newName== directly from user.
Notice that Commander provides way how to define specific preparation method for specific application context. By default it is ==prepareExecutionInContext:== but it can be different for advanced scenarious.

So we need ==selectedContact== for presenter to make it compatible to context of our command:

[[[
ContactBookPresenter>>selectedContact
	^table selectedItem
]]]

Now if you will click on 'Rename' item you will be requested for new contact name. But after submit the view will be not updated. Reopen presenter window to see result.

It is your responsibility to manage updates between application and model. So you can use some event system which will automatically udpate view after modification of model.

But Commander provides very simple mechanizm to apply result of command which can be also used to update the view.

==applyResultInContext:== is called when command is executed. You can implement it on your commands to produce desired effect in context of your application:

[[[
RenameContactCommand>>applyResultInContext: aToolContext
	super applyResultInContext: aToolContext.

	aToolContext updateView
]]]

Here we require that context should be able update the view. And presenter should support it:

[[[
ContactBookPresenter>>updateView
	table items: contactBook contents
]]]

And finally context menu item is working fine: it asks new name and table updates after submit.

At the end of this section you can enable shortcuts on presenter. Just implement method ==ensureKeyBindingsFor==:

[[[
ContactBookPresenter>>ensureKeyBindingsFor: aWidget
	self enableCommanderShortcutsIn: aWidget
]]]

Then reopen window, select contact and press cmd+r (on Mac). You will get new name dialog which will rename selected contact at the end.

At the end try create few other commands. Now with all required methods in presenter the creation of new commands are very straightforward process

1. Command to modify contact phone number:

[[[
CmdCommand subclass: #ChangePhoneCommand
	instanceVariableNames: 'contact newPhone'
	classVariableNames: ''
	package: 'Commander-Examples'

ChangePhoneCommand>>execute
	contact phone: newPhone

ChangePhoneCommand>>prepareFullExecutionInContext: aToolContext
	super prepareFullExecutionInContext: aToolContext.

	contact := aToolContext selectedContact.

	newPhone := UIManager default
		request: 'New phone for the contact'
		initialAnswer: contact phone
		title: 'Set new phone for contact'.
	newPhone isEmptyOrNil | (newPhone = contact name) ifTrue: [ ^ CmdCommandAborted signal ]

ChangePhoneCommand>>applyResultInContext: aToolContext
	super applyResultInContext: aToolContext.

	aToolContext updateView

ChangePhoneCommand>>defaultMenuItemName
	^'New phone'
]]]

And activation methods:

[[[
ChangePhoneCommand class>>contextMenuActivation
	<classAnnotation>
  ^CmdContextMenuCommandActivation byRootGroupItemFor: CmdContactBookPresenter

ChangePhoneCommand class>shortcutActivation
	<classAnnotation>
  ^CmdShortcutCommandActivation by: $p meta for: CmdContactBookPresenter
]]]

2. Command to remove contact:

[[[
CmdCommand subclass: #RemoveContactCommand
	instanceVariableNames: 'contactBook contact'
	classVariableNames: ''
	package: 'Commander-Examples'

RemoveContactCommand>>execute
	contactBook removeContact: contact

RemoveContactCommand>>prepareFullExecutionInContext: aToolContext
	super prepareFullExecutionInContext: aToolContext.

	contactBook := aToolContext selectedContactBook.
	contact := aToolContext selectedContact.

RemoveContactCommand>>applyResultInContext: aToolContext
	super applyResultInContext: aToolContext.

	aToolContext updateView

RemoveContactCommand>>defaultMenuItemName
	^'Remove'
]]]

Here we extend our requirement to the context: to be able remove contact we also need a contact book instance where we should perform deletion.

And we implement new method ==selectedContactBook== in presenter:

[[[
ContactBookPresenter>>selectedContactBook
	^contactBook
]]]

Notice that we could call from the accessor ==contactBook== from aToolContext. But it leads to bad reusability of command because the name ==contactBook== means single book instance while other applications can provide multiple of them in same way like our current presenter provides multiple contacts.
So in sense of tool context it is better to call ==selectedContactBook== while it is better reflects abstract requirement of information.

And activation methods:

[[[
RemoveContactCommand class>>contextMenuActivation
	<classAnnotation>
  ^CmdContextMenuCommandActivation byRootGroupItemFor: CmdContactBookPresenter

RemoveContactCommand class>shortcutActivation
	<classAnnotation>
  ^CmdShortcutCommandActivation by: $x meta for: CmdContactBookPresenter
]]]

+Family book menu>file://figures/FamilyWithMenu.png+

It is up to you to maintain commands in good shape. In this example commands use same state ==contact== and duplicate method ==applyResultInContext:==.
You can refactor it with your taste, extract common superclass and so on.

!!! Extra command conditions

Now there will be error if you will try rename contact when no item is selected in table.

Normally menu should not include items in such cases or they should be disabled.

To define runtime condition where command can be activated you need class side method ==canBeExecutedInContext==:

[[[
RenameContactCommand class>>canBeExecutedInContext: aToolContext
	^aToolContext isContactSelected
]]]

(As default implementation any command can be executed in any context. So this method returnes true)

And presenter should implement ==isContactSelected==:
[[[
ContactBookPresenter>>isContactSelected
	^table selectedItem notNil
]]]

!!! Context menu tuning

We already redefine menu item name in the method ==defaultMenuItemName==.
There are other settings:
- order of item in menu
- menu group of item
- separator between items
- menu icon
- special representation of menu item

!!!! Menu item order

Order of item should be specified in context menu activation method.
In our example 'Rename' item was placed at the end of menu because by default items are sorted in alphabet order.
To change the order the activation strategy should be created with extra parameter:

[[[
CmdChangePhoneCommand>>contextMenuActivation
	<classAnnotation>
    ^CmdContextMenuCommandActivation byRootGroupItemOrder: 1 for: CmdContactBookPresenter
]]]

The lesser order value puts item to the top of menu list.

!!!! Menu groups

Commander allows create hierarchical menu using reified menu groups.
Imaging that you would like to put 'New phone' command under 'Phone operations' submenu.

First you need new subclass of CmdMenuGroup:

[[[
CmdMenuGroup subclass: #PhoneMenuGroup
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Commander-Examples'
]]]

And then just create method activation with group class parameter:

[[[
ChangePhoneCommand>>contextMenuActivation
	<classAnnotation>
  ^CmdContextMenuCommandActivation byItemOf: PhoneMenuGroup for: CmdContactBookPresenter
]]]

It will moves ChangePhoneCommand to extra submenu with name 'PhoneMenuGroup'.
And you can specify better name as in case of commands:

[[[
PhoneMenuGroup>>name
	^'Phone operations'
]]]

!!!! Menu separators

Commander models separators as inlined menu group.
You only need to mark target group as inlined and all its items will be added to the parent with separators:

[[[
PhoneMenuGroup>>isInlined
	^true
]]]

!!!! Menu icons

To specify icon command should implement the method ==setUpIconForMenuItem:==

[[[
RemoveContactCommand>>setUpIconForMenuItem: aMenuItemMorph
	self setUpIconNamed: #removeIcon forMenuItem: aMenuItemMorph
]]]

It looks a bit complicated but idea is to be able create dynamic and complex icons based on commands state. For this reason it is not enough to only return icon name from some simple icon method.

!!!! Custom menu items

When Commander builds context menu it as command itself to build menu item view element (a morph).
By default CmdCommand returns standard menu item morph but subclasses can redefine it to be represented in menu specifically.

For example we can represent item with different color:

[[[
CmdRenameContactCommand>>fillContextMenu: aMenu using: aCommandActivator
	| item |
	item := aMenu
		add: aCommandActivator menuItemName
		target: aCommandActivator
		selector: #executeCommand.

	item color: Color red
]]]

You can notice here that command can be represented by multiple menu items. ==fillContextMenu== method provides full control under menu.
For example you can generate multiple command copies with some specific parameter. It leads to highly dynamic menus which could be needed for some special applications.

Also same kind of flexibility is available for groups. Looat at default implementation of menu group for example:

[[[
CmdMenuGroup>>buildContextSubMenuIn: aMenu
	| submenu |
	submenu := UIManager default newMenuIn: aMenu defaultTarget for: aMenu defaultTarget.

	contents do: [ :each | each buildContextMenu: submenu ].

	submenu hasItems ifTrue: [ aMenu add: self name subMenu: submenu]
]]]

You can redefine it in your own group to build very special menus.

!!! Drag and drop example




!!! Commands, activations and contexts

The commander library is structured around three main entities:

- ''commands'' that represent the actions to be executed,
- ''command activation strategies'' that represent ways commands are activated (i.e., using shortcuts, menus..) and
- ''contexts'' which represent the applications in particular state.

@@todo SD:here we should have a diagram


!!! Contexts

Activation strategies are always declared with the application context where they can be applied.
In simplest case it can be just a class of command user application (==PackageBrowser== in example).

An application should provide such contexts as subclasses of ==CmdToolContext== with information related to the  application state.

Every widget can bring its own context to interact with application as separate tool.
For example, a system browser shows multiple panes which provide package, class  and method contexts. Depending on the context, the browser will show different menus and provides different shortcuts.


To support activators, command should implement several methods: ==What is a standardContext:==?

!!!! canBeExecutedInContext: aToolContext
The method ==canBeExecutedInContext: == defines whether the command that be executed in a context. By default it returns true. But usually commands query context for specific information.

For example ==RenamePackageCommand== requires a package and it defines this method as follows:

[[[
RenamePackageCommand >> canBeExecutedInContext: aToolContext
   ^aToolContext isPackageSelected
]]]

!!!! prepareFullExecutionInContext: aToolContext
With the method ==prepareFullExecutionInContext:==, the command should retrieve all state required for execution. It can also ask user for extra data. For example ==RenamePackageCommand== retrieves the package to be renamed from the context and asks the user for new name:

[[[
RenamePackageCommand >> prepareFullExecutionInContext: aToolContext

    package := aToolContext selectedPackage.
    newName := UIManager default
        request: 'New name of the package'
        initialAnswer: package name
        title: 'Rename a package'.
    newName isEmptyOrNil | (newName = package name)
		ifTrue: [ ^ CmdCommandAborted signal ]
]]]

Note that to abort command execution, a command can raise the ==CmdCommandAborted== signal.

!!!! applyResultInContext: aToolContext
Purpose of the method ==applyResultInContext:== is to be able interact with application when command completes. ==I do not like the name of the method== why not ==afterExecution or postActionInContext:==.

For example, when a user creates new package from a browser, we want to tool to show the package. We expressed that once the command is executed, the browser should open created package as follows:

[[[
CreatePackageCommand >> applyResultInContext: aToolContext
    aToolContext showPackage: resultPackage
]]]

== SD:hy this logic is defined in the command and not in the tool logic??==



Commands are supposed to be reusable for different contexts and these methods should be implemented with that in mind. They should not leak internal structure of contexts.

!!! Specific contexts

Specific context can override activation methods and send its own set of messages to command.

 For example:

[[[
SpecialContextA >> allowsExecutionOf: aCommand
	 ^aCommand canBeExecutedInSpecialContextA: self

SpecialContextA >> prepareFullExecutionOf: aCommand
  aCommand prepareFullExecutionInSpecialContextA: self

SpecialContextA >> applyResultOf: aCommand
  aCommand applyResultInSpecialContextA: self
]]]

==I'm lost: where these methods come from? are they defined?==


By default ==CmdCommand== can implement with standard context methods. And only particular commands will override them specifically:

[[[
CmdCommand >> prepareFullExecutionInSpecialContextA: aSpecialContextA
  self prepareFullExecutionInContext: aSpecialContextA

SomeCommand >> prepareFullExecutionInSpecialContextA: aSpecialContextA
  "special logic to prepare command for execution"
]]]

The way how concrete type of activator hooks into application is responsibility of application. Look at related sections for details on concrete activator.

In future Commander will provide deep integration with UI. And many things will work automatically.

!!! Command execution

Context instances are used to perform command lookup.
For example following expression will enumerate all shortcut activators relevant to package pane of a possible browser:

[[[
CmdShortcutCommandActivator
  allDeclaredFor: aPackageBrowserContext
  do: [ :declaredActivator | show all the code here please ]
]]]

A declared activator is in fact not ready for execution because it should be bound to a context.
It should create new activator instance for this:

[[[
readyActivator := declaredActivator newActivationFor: aPackageBrowserContext
]]]

Ready activator is bound to given context and it keeps a new command instance. To execute command evaluate:

[[[
readyActivator executeCommand
]]]

Before execution, users should check that it is possible:

[[[
activator canExecuteCommandInContext: aPackageBrowserContext
]]]

There is a convenient method to enumerate only executable commands. Here is for example how to get all the executable commands for package related commands.

[[[
CmdShortcutCommandActivator
   allExecutableIn: aPackageBrowserContext
   do: [ :readyActivator |
   please show code that we can execute ]
]]]



!!! Abstract menu activation
@abstractMenuActivation


==SD:why abstract??==.

There are a lot of different types of menu: context menu, toolbar, morphic halo menu, etc.
All of them are very similar: they show set of items to the user and when user selects one the action associated with item is evaluated. The main difference between them is the way how they are represented to user and where they are shown in application.

The commander library allows the building of different kind of menus based on commands and first class groups. Concrete type of menu is represented by concrete type of activator, subclass of ==CmdMenuCommandActivator==.

These activators mark commands to be part of menu:

[[[
YourCommand >> yourAppMenuActivator
  <commandActivator>
  ^ConcreteMenuCommandActivator byItemOf: YourAppChildMenuGroup for: YourAppContext
]]]

Activator provides information about name, group and position of command inside menu:
- ==menuItemName== (by default it is retrieved from command instance by sending the message ==defaultMenuItemName==).
- ==menuItemOrder== (higher value pushes command to the end of menu)
- ==menuGroup== (root by default)

To set up these properties there are few instance creation methods:
- ==byRootGroupItemFor: YourAppContext==
- ==byRootGroupItemOrder: aNumber for: YourAppContext==
- ==byItemOf: menuGroupClass for: YourAppContext==
- ==byItemOf: menuGroupClass order: aNumber for: YourAppContext==

==CmdMenu== represents abstract tree structure for concrete menu implementation:
==SD:I do not get how cmdMenu is related to ConcreteMenuCommandActivator==
==SD: give a real example==
[[[
menu := CmdMenu activatedBy: aCommandActivatorClass
]]]

==I'm lost why do we need a commandActivatorClass here?==

It builds commands and group items using information from activators declared for given context:

[[[
menu buildInContext: aToolContext
]]]

This method can be called multiple times for different contexts. It allows one to build single menu for multiple parts of application. For example toolbar menu can include commands for all visible widgets.

Menu groups are represented by subclasses of ==CmdMenuGroup==. They are used as classes to declare activators. Instances are only created during menu building.

Groups are containers of command items and other groups. They define following methods to describe menu structure:
- ==parentGroup== on class side. By default it is CmdRootMenuGroup. Subclasses override it to define deep tree structure.
- ==order== on instance side. Larger values pushed group to the end of menu
- ==name== on instance side. It should be shown to user in concrete menu implementation.

Concrete menu activators extend menu objects and commands with specific methods to build concrete view elements. For example look at next section.

==SD: but next section refers to this one==

!!! Context menu command activation

To add commands into context menu use ==CmdContextMenuCommandActivator== (more details at *@abstractMenuActivation*). For example:

[[[
RenamePackageCommand class >> packageBrowserMenuActivator
  <commandActivator>
  ^CmdContextMenuCommandActivator byRootGroupItemFor: PackageBrowserContext
]]]

To build context menu morph use following expression:

[[[
menu := CmdContextMenuCommandActivator buildMenuFor: anAppMorph inContext: aToolContext
]]]

Context menu extends command with menu building method:

[[[
CmdCommand >> fillContextMenu: aMenu using: anActivator
]]]

It creates menu item morph and allows subclasses to define default label and icon:

- ==defaultMenuItemName==
- ==setUpIconForMenuItem: aMenuItemMorph==

Subclasses can override building method ==fillContextMenu:using:== to represent themselves differently. For example they can create menu item with check box.

!!! Shortcut command activation

To mark commands with shortcuts use CmdShortcutCommandActivator. For example:

[[[
RenamePackageCommand class >> packageBrowserShortcutActivator
  <commandActivator>
  ^CmdShortcutCommandActivator by: $r meta for: PackageBrowserContext
]]]

There are extra instance creation methods for standard shortcuts:
- ==renamingFor: aToolContext==
- ==removalFor: aToolContext==

To support shortcuts based on commands application should define specific kmDispatcher for target morphs:

[[[
YourAppMorph >> kmDispatcher
  ^CmdKMDispatcher attachedTo: self
]]]

with supporting method:

[[[
YourAppMorph >> createCommandContext
  ^YourAppContext for: self
]]]

!!! Drag and drop command activation

Drag and drop command activation is different than others.
To prepare command it needs two contexts. First context describes the place where drag was started. Second context describes drop target tool.
So activator prepares command execution in both contexts. They bring different information.
And together they are supposed to provide all required data for command execution without extra user requests.

According to this logic commands should define following supporting methods when they want drag and drop:

- ==prepareExecutionInDragContext: aToolContext==
- ==prepareExecutionInDropContext: aToolContext==
- ==canBeExecutedInDropContext: aToolContext==

Also specific contexts can define own set of activation methods:

[[[
SpecialContextA >> allowsDropExecutionOf: aCommand
  ^aCommand canBeExecutedInSpecialDropContextA: self

SpecialContextA >> prepareDragActivationOf: aCommand
	aCommand prepareExecutionInSpecialDragContextA: self

SpecialContextA >> prepareDropExecutionOf: aCommand
	aCommand prepareExecutionInSpecialDropContextA: self
]]]


To activate commands with drag and drop use ==CmdDragAndDropCommandActivator==. For example:

[[[
MoveMethodToClassCommand class >> methodBrowserDragAndDropActivator
  <commandActivator>
  ^CmdDragAndDropCommandActivator for: MethodBrowserContext toDropIn: ClassBrowserContext
]]]

And supporting methods would be:

[[[
MoveMethodToClassCommand >> prepareExecutionInDragContext: aToolContext
  super prepareExecutionInDragContext: aToolContext.
  methods := aToolContext selectedMethods

MoveMethodToClassCommand >> prepareExecutionInDropContext: aToolContext
    super prepareExecutionInDropContext: aToolContext.
    targetClass := aToolContext selectedClass
]]]

!!! Conclusion
